# -*- coding: utf-8 -*-
"""
/***************************************************************************
 HeatNetTool
                                 A QGIS plugin
 This plugin provides tools for district heating planning
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-03-04
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Lars Goray
        email                : lars.goray@fh-muenster.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog
from qgis.core import QgsProject
#import openpyxl

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .heat_net_tool_dialog import HeatNetToolDialog
import os.path
import subprocess

# Import code for net analysis
from .net_analysis import get_closest_point, calculate_GLF, calculate_volumeflow, calculate_diameter_velocity_loss, Streets, Source, Buildings, Graph, Net, Result

class HeatNetTool:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'HeatNetTool_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Heat Net Tool ')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('HeatNetTool', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/heat_net_tool/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Toolbox for planning district heating networks'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Heat Net Tool '),
                action)
            self.iface.removeToolBarIcon(action)
    
    def select_output_file(self):
        filename, _filter = QFileDialog.getSaveFileName(
            self.dlg, "Select output file ","", '*.csv')
        self.dlg.lineEdit.setText(filename)

    def load_layers_to_combobox(self, combobox):
        '''loads layers to selected combobox'''
        # Fetch the currently loaded layers
        layers = QgsProject.instance().layerTreeRoot().children()
        # Clear the contents of the comboBox from previous runs
        combobox.clear()
        # Add a default translated item as the first item in the ComboBox
        combobox.addItem(self.tr("Select Layer"))
        # Populate the comboBox with names of all the loaded layers
        combobox.addItems([layer.name() for layer in layers])

        # Set the default item as the current index
        combobox.setCurrentIndex(0)
    
    def load_attributes_to_combobox(self, layer_name, combobox):
        """Load attributes of the selected layer to the given combobox."""
        # Find the layer by its name
        layer = QgsProject.instance().mapLayersByName(layer_name)[0]  # Assuming unique names
        # Clear the contents of the comboBox from previous runs
        combobox.clear()
        # Add a default item as the first item in the ComboBox
        combobox.addItem(self.tr("Select Attribute"))
        # Populate the comboBox with names of all the attributes of the layer
        for field in layer.fields():
            combobox.addItem(field.name())

        # Set the default item as the current index
        combobox.setCurrentIndex(0)

    def load_attributes(self, combobox_in, combobox_out):
        """Load attributes of the selected layer in combobox_in to the given combobox_out."""
        # Get the current layer name selected in the specified combobox
        layer_name = getattr(self.dlg, combobox_in).currentText()
        # Load attributes to the specified combobox
        self.load_attributes_to_combobox(layer_name, getattr(self.dlg, combobox_out))

    def install_package(self,package_list):
        """installs a python package with pip"""
        for package in package_list:
            try:
                # FÃ¼hrt den Befehl "pip install" aus, um das Paket zu installieren
                subprocess.check_call(["pip", "install", package])
                print(f"{package} wurde erfolgreich installiert.")
            except subprocess.CalledProcessError:
                print(f"Fehler beim Installieren von {package}.")

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = HeatNetToolDialog()

            

            # install python packages
            package_list = ['openpyxl','networkx','geopandas']
            self.dlg.intro_pushButton_load_packages.clicked.connect(lambda: self.install_package(package_list))
            
            # select output file
            self.dlg.net_pushButton_output_file.clicked.connect(self.select_output_file)

            # Load layers into all the comboBoxes
            self.load_layers_to_combobox(self.dlg.net_comboBox_buildings)
            self.load_layers_to_combobox(self.dlg.net_comboBox_streets)
            self.load_layers_to_combobox(self.dlg.net_comboBox_source)
            self.load_layers_to_combobox(self.dlg.net_comboBox_polygon)
        
        ### Network Analysis ###

        # Connect signal for net_comboBox_buildings to load attributes on change
        self.dlg.net_comboBox_buildings.currentIndexChanged.connect(lambda: self.load_attributes('net_comboBox_buildings', 'net_comboBox_heat'))
        self.dlg.net_comboBox_buildings.currentIndexChanged.connect(lambda: self.load_attributes('net_comboBox_buildings', 'net_comboBox_power'))


        # show the dialog
        self.dlg.show()

        # # Run the dialog event loop
        # result = self.dlg.exec_()
        # # See if OK was pressed
        # if result:
        #     # Do something useful here - delete the line containing pass and
        #     # substitute with your code.
        #     pass
