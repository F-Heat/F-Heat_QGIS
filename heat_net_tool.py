# -*- coding: utf-8 -*-
"""
/***************************************************************************
 HeatNetTool
                                 A QGIS plugin
 This plugin provides tools for district heating planning
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-03-04
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Lars Goray
        email                : lars.goray@fh-muenster.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog, QCompleter
from qgis.core import QgsField, QgsProject, QgsMapLayer, QgsVectorLayer,QgsGraduatedSymbolRenderer, QgsSymbol, QgsLineSymbol, QgsSymbolLayer, QgsRendererCategory, QgsRendererRange, QgsClassificationRange

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .heat_net_tool_dialog import HeatNetToolDialog

import os.path
import subprocess
import pandas as pd
import geopandas as gpd
import os
from pathlib import Path

from .download_files import file_list_from_URL, search_filename, read_file_from_zip, filter_df, get_shape_from_wfs
from .adjust_files import Streets_adj, Buildings_adj, Parcels_adj, spatial_join
from .status_analysis import WLD, Polygons

from .net_analysis import Streets, Source, Buildings, Graph, Net, Result, get_closest_point, calculate_GLF, calculate_volumeflow, calculate_diameter_velocity_loss

class HeatNetTool:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'HeatNetTool_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Heat Net Tool ')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

        

        # Gemarkung (Name and info of municipalities and cities in NRW)
        self.gemarkungen_df = pd.DataFrame()

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('HeatNetTool', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/heat_net_tool/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Toolbox for planning district heating networks'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Heat Net Tool '),
                action)
            self.iface.removeToolBarIcon(action)

    def install_package(self,package_list):
        """installs python packages with pip"""
        for package in package_list:
            try:
                # FÃ¼hrt den Befehl "pip install" aus, um das Paket zu installieren
                subprocess.check_call(["pip", "install", "--upgrade", package])
                print(f"{package} wurde erfolgreich installiert.")
            except subprocess.CalledProcessError:
                print(f"Fehler beim Installieren von {package}.")

    def select_output_file(self, dir, lineEdit, filetype):

        filename, _filter = QFileDialog.getSaveFileName(
            self.dlg, "Select output file ",dir, filetype)
        lineEdit.setText(filename)

    def get_layer_path_from_combobox(self, combobox):
        """
        Get the path of the selected layer from the given ComboBox.

        :param combobox: The QComboBox object representing the layer selection.
        :type combobox: QComboBox

        :return: The path of the selected layer.
        :rtype: str
        """
        # Get the name of the selected layer from the ComboBox
        selected_layer_name = combobox.currentText()

        # Find the layer in the project
        layers = QgsProject.instance().mapLayersByName(selected_layer_name)

        if layers:
            # Assume we take the first found layer if multiple layers have the same name
            selected_layer = layers[0]
            # Extract the path from the layer information
            path = selected_layer.source()

            # Check if '|' character exists in the path
            if '|' in path:
                # Split the path and layer name
                path_parts = path.split('|')
                path = path_parts[0]  # Path is the first part
                # Layer name is the second part, remove 'layername='
                selected_layer_name = path_parts[1].replace('layername=', '')

            return path, selected_layer_name, selected_layer
        else:
            return None, None, None

    def add_shapefile_to_project(self, shapefile_path, att=None):
        """Add a shapefile to the QGIS project."""
        layer_name = os.path.splitext(os.path.basename(shapefile_path))[0]
        layer = QgsVectorLayer(path=shapefile_path, baseName=layer_name, providerLib='ogr')
        if not layer.isValid():
            print("Layer failed to load!")
            return

        # if att == 'hld':
        #     # Define renderer
        #     renderer = QgsGraduatedSymbolRenderer('HLD')

        #     # Define categories
        #     categories = []

        #     # Define symbols for each category
        #     symbol_0 = QgsLineSymbol()
        #     symbol_0.setWidth(0.3)  # Adjust line width for category 0
        #     categories.append(QgsRendererCategory(0.0, symbol_0, '0'))

        #     symbol_1 = QgsLineSymbol()
        #     symbol_1.setWidth(0.6)  # Adjust line width for category 1
        #     categories.append(QgsRendererCategory(500.0, symbol_1, '0-500'))

        #     symbol_2 = QgsLineSymbol()
        #     symbol_2.setWidth(1)  # Adjust line width for category 2
        #     categories.append(QgsRendererCategory(1200.0, symbol_2, '500-1200'))

        #     symbol_3 = QgsLineSymbol()
        #     symbol_3.setWidth(1.3)  # Adjust line width for category 3
        #     categories.append(QgsRendererCategory(float('inf'), symbol_3, '>1200'))

        #     # Apply categories to renderer
        #     renderer.categories = categories
        #     layer.setRenderer(renderer)
        #     #layer.triggerRepaint()

        QgsProject.instance().addMapLayer(layer)


    def load_download_options(self):
        '''download municipality and city names of NRW to comboBoxes'''

        # feedback
        self.dlg.load_label_feedback1.setText('Loading Options...')
        self.dlg.load_label_feedback1.setStyleSheet("color: orange")
        self.dlg.load_label_feedback1.repaint()

        url = 'https://www.opengeodata.nrw.de/produkte/geobasis/lk/akt/gmk_flur_shp/'
        zipfile = 'gmk_flur_EPSG25832_Shape.zip'
        file_pattern = 'vg_gemarkung'

        df = read_file_from_zip(url, zipfile, file_pattern, encoding = 'utf-8')
        municipalities = sorted(df['gemeinde'].unique().tolist())
        cities = sorted(df['name'].tolist())

        # add options to comboBoxes
        self.dlg.load_comboBox_municipality.addItems(municipalities)
        self.dlg.load_comboBox_city.addItems(cities)

        # save df for later operations
        self.gemarkungen_df = df

        # feedback
        self.dlg.load_label_feedback1.setStyleSheet("color: green")
        self.dlg.load_label_feedback1.setText('Loading complete!')

    # Methods for loading layers and attributes to comboboxes

    def get_all_loaded_layers(self):
        """Get a list of all loaded layers in the project, including layers within groups."""
        root = QgsProject.instance().layerTreeRoot()
        all_layers = root.layerOrder()
        loaded_layers = []

        for layer in all_layers:
            if isinstance(layer, QgsMapLayer):
                loaded_layers.append(layer)

        return loaded_layers

    def load_layers_to_combobox(self, combobox):
        '''loads layers to selected combobox'''
        # Fetch the currently loaded layers
        layers = self.get_all_loaded_layers()
        # Clear the contents of the comboBox from previous runs
        combobox.clear()
        # Add a default translated item as the first item in the ComboBox
        combobox.addItem(self.tr("Select Layer"))
        # Populate the comboBox with names of all the loaded layers
        combobox.addItems([layer.name() for layer in layers])
        # Set the default item as the current index
        combobox.setCurrentIndex(0)
    
    def load_attributes_to_combobox(self, layer_name, combobox):
        """Load attributes of the selected layer to the given combobox."""
        # Find the layer by its name
        layer = QgsProject.instance().mapLayersByName(layer_name)[0]  # Assuming unique names
        # Clear the contents of the comboBox from previous runs
        combobox.clear()
        # Add a default item as the first item in the ComboBox
        combobox.addItem(self.tr("Select Attribute"))
        # Populate the comboBox with names of all the attributes of the layer
        for field in layer.fields():
            combobox.addItem(field.name())

        # Set the default item as the current index
        combobox.setCurrentIndex(0)

    def load_attributes(self, combobox_in, combobox_out):
        """Load attributes of the selected layer in combobox_in to the given combobox_out."""
        # Get the current layer name selected in the specified combobox
        layer_name = getattr(self.dlg, combobox_in).currentText()

        layers = self.get_all_loaded_layers()

        # Load attributes to the specified combobox
        if layer_name in [layer.name() for layer in layers]:
            self.load_attributes_to_combobox(layer_name, getattr(self.dlg, combobox_out))
    
    def tab_change(self):
        '''Updates when tab is changed'''
        # Load layers into comboBoxes
        self.load_layers_to_combobox(self.dlg.adjust_comboBox_buildings)
        self.load_layers_to_combobox(self.dlg.adjust_comboBox_parcels)
        self.load_layers_to_combobox(self.dlg.adjust_comboBox_streets)
        self.load_layers_to_combobox(self.dlg.status_comboBox_streets)
        self.load_layers_to_combobox(self.dlg.status_comboBox_parcels)
        self.load_layers_to_combobox(self.dlg.status_comboBox_buildings)
        self.load_layers_to_combobox(self.dlg.net_comboBox_buildings)
        self.load_layers_to_combobox(self.dlg.net_comboBox_streets)
        self.load_layers_to_combobox(self.dlg.net_comboBox_source)
        self.load_layers_to_combobox(self.dlg.net_comboBox_polygon)

    # Main Methods

    def download_files(self):

        # update progressBar
        self.dlg.load_progressBar.setValue(0)

        # URLs
        # buildings
        url_buildings = 'https://www.opengeodata.nrw.de/produkte/umwelt_klima/klima/kwp/'

        # parcels
        url_parcels = 'https://www.wfs.nrw.de/geobasis/wfs_nw_inspire-flurstuecke_alkis'
        layer_parcels = 'cp:CadastralParcel'

        # get name from combo box
        if self.dlg.load_radioButton_municipality.isChecked():
            name = self.dlg.load_comboBox_municipality.currentText()
            parameter = 'municipality'
        elif self.dlg.load_radioButton_city.isChecked():
            name = self.dlg.load_comboBox_city.currentText()
            parameter = 'city'
        else:
            self.dlg.load_label_feedback.setText('please choose municipality or city')
            return
        
        # update progressBar
        self.dlg.load_progressBar.setValue(1)
        
        
        # filter df for city/municipality name
        filtered_df = filter_df(name, self.gemarkungen_df, parameter)
        # add bounding box (important for downloading parcels)
        filtered_df['bbox'] = filtered_df['geometry'].bounds.apply(
            lambda row: (row['minx'], row['miny'], row['maxx'], row['maxy']), axis=1)
        # city/municipality keys
        municipality_key = filtered_df['gmdschl'][0]

        # update progressBar
        self.dlg.load_progressBar.setValue(5)
        self.dlg.load_label_feedback.setStyleSheet("color: orange")
        self.dlg.load_label_feedback.setText('Downloading...')
        self.dlg.load_label_feedback.repaint()

        # buildings shapes
        all_buildings_files = file_list_from_URL(url_buildings+'index.json')
        self.dlg.load_progressBar.setValue(10)
        buildings_zip = search_filename(all_buildings_files, municipality_key)
        self.dlg.load_progressBar.setValue(15)
        buildings_file_pattern = f'WBM-NRW_{municipality_key}' # file pattern maybe has to be renamed, when changes on the website occur
        buildings_gdf = read_file_from_zip(url_buildings, buildings_zip, buildings_file_pattern)

        # update progressBar
        self.dlg.load_progressBar.setValue(35)

        # streets shapes
        streets_file_pattern = f'WBM-NRW-Waermelinien_{municipality_key}' # file pattern maybe has to be renamed, when changes on the website occur
        streets_gdf = read_file_from_zip(url_buildings, buildings_zip, streets_file_pattern)

        # update progressBar
        self.dlg.load_progressBar.setValue(55)

        # parcels
        gdf_list_parcels=[] # if a whole municipality is selected filtered df consists of multiple cities which parcels will be saved in this list and later merged
        for row  in filtered_df.itertuples():
            bbox = row.bbox
            key = row.schluessel
            parcel_gdf_i, e = get_shape_from_wfs(url_parcels, key, bbox, layer_parcels)
            if e == 1:
                self.dlg.load_label_feedback.setText(f'Too many parcels for key: {key}!\nMax. 100.000 parcels can be downloaded at once\nparcels incomplete')
            gdf_list_parcels.append(parcel_gdf_i)
        parcels_gdf = pd.concat(gdf_list_parcels, ignore_index=True)

        # update progressBar
        self.dlg.load_progressBar.setValue(90)

        # buffer(0) can sometimes repair invalid geometries
        buildings_gdf['geometry'] = buildings_gdf['geometry'].buffer(0)
        parcels_gdf['geometry'] = parcels_gdf['geometry'].buffer(0)

        # The buildings and streets can only be downloaded at municipality level, if you only want one city, the 
        # additional buildings are superfluous and only extend the calculation time of the following programs.
        # Therefore, only buildings that are located on the parcels that are available at municipality level are retained
        if parameter == 'city':
            union = gpd.GeoDataFrame(geometry=[parcels_gdf.unary_union], crs = self.epsg_code)
            buildings_gdf = gpd.sjoin(buildings_gdf, union, predicate='intersects')
            streets_gdf = gpd.sjoin(streets_gdf, union, predicate='intersects')

        # update progressBar
        self.dlg.load_progressBar.setValue(98)

        # path to save net shape file and results
        buildings_path = self.dlg.load_lineEdit_buildings.text()
        streets_path = self.dlg.load_lineEdit_streets.text()
        parcels_path = self.dlg.load_lineEdit_parcels.text()

        # save shapes
        buildings_gdf.to_file(buildings_path)
        streets_gdf.to_file(streets_path)
        parcels_gdf.to_file(parcels_path)

        # load layers to project
        self.add_shapefile_to_project(parcels_path)
        self.add_shapefile_to_project(buildings_path)
        self.add_shapefile_to_project(streets_path)
        
        # update progressBar
        self.dlg.load_progressBar.setValue(100)
        self.dlg.load_label_feedback.setStyleSheet("color: green")
        self.dlg.load_label_feedback.setText('Download complete!')

        # except Exception as e:
        #     self.dlg.load_label_feedback.setStyleSheet("color: red")
        #     self.dlg.load_label_feedback.setText(f'Error downloading shapefiles: {e}')
        #     print(f'Error downloading shapefiles: {e}')

    def adjust_files(self):

        # update progressBar
        self.dlg.adjust_progressBar.setValue(0)

        self.dlg.adjust_label_feedback.setStyleSheet("color: orange")
        self.dlg.adjust_label_feedback.setText('Calculating...')
        self.dlg.adjust_label_feedback.repaint()

        # heat demand attribute
        heat_att = 'RW_WW'

        # building age classes
        bak_bins = [0, 1918, 1948, 1957, 1968, 1978, 1983, 1994, 2001, 9999]
        bak_labels = ['B','C','D','E','F','G','H','I','J']
        
        excel_path = self.plugin_dir+'/building_info_18_10_2016.xlsx'
        excel_building_info = pd.read_excel(excel_path,sheet_name='database')

        streets_path, streets_layer_name, streets_layer_obj = self.get_layer_path_from_combobox(self.dlg.adjust_comboBox_streets)
        buildings_path, buildings_layer_name, buildings_layer_obj = self.get_layer_path_from_combobox(self.dlg.adjust_comboBox_buildings)
        parcels_path, parcels_layer_name, parcels_layer_obj  = self.get_layer_path_from_combobox(self.dlg.adjust_comboBox_parcels)
        
        # update progressBar
        self.dlg.adjust_progressBar.setValue(10)

        parcels = Parcels_adj(parcels_path, self.epsg_code)
        buildings = Buildings_adj(buildings_path, heat_att, self.epsg_code)
        streets = Streets_adj(streets_path, self.epsg_code)

        # test if buildings already have been adjusted
        if 'Lastprofil' in buildings.gdf.columns:
            self.dlg.adjust_progressBar.setValue(100) # update progressBar
            self.dlg.adjust_label_feedback.setStyleSheet("color: green")
            self.dlg.adjust_label_feedback.setText('Buildings already adjusted!')
        else:
            buildings.gdf = buildings.gdf[buildings.gdf[heat_att]>0].reset_index(drop=True) # only buildings with heat demand
            self.dlg.adjust_progressBar.setValue(20) # update progressBar
            buildings.gdf = spatial_join(buildings.gdf.copy(), parcels.gdf, ['validFrom']) # building age from parcels
            self.dlg.adjust_progressBar.setValue(30) # update progressBar
            buildings.add_BAK(bak_bins,bak_labels) # add building age class
            self.dlg.adjust_progressBar.setValue(40) # update progressBar
            buildings.add_age_LANUV() # add building age by LANUV
            self.dlg.adjust_progressBar.setValue(50) # update progressBar
            buildings.add_Vlh_Loadprofile(excel_building_info)
            self.dlg.adjust_progressBar.setValue(60) # update progressBar
            buildings.drop_unwanted()
            buildings.add_power()
            self.dlg.adjust_progressBar.setValue(70) # update progressBar
            buildings.gdf['new_ID'] = buildings.gdf.index.astype('int32')
            buildings.merge_buildings()

            self.dlg.adjust_progressBar.setValue(80) # update progressBar
            streets.round_streets()
            self.dlg.adjust_progressBar.setValue(90) # update progressBar
            streets.add_bool_column() # possible routes

            self.dlg.adjust_progressBar.setValue(95) # update progressBar

            if self.dlg.adjust_radioButton_new.isChecked():
                buildings_path = self.dlg.adjust_lineEdit_buildings.text()
                streets_path = self.dlg.adjust_lineEdit_streets.text()

            # save shapes
            buildings.gdf.to_file(buildings_path)
            streets.gdf.to_file(streets_path)

            if self.dlg.adjust_radioButton_new.isChecked():
                # load layers to project
                self.add_shapefile_to_project(streets_path)
                self.add_shapefile_to_project(buildings_path)
            else:
                QgsProject.instance().removeMapLayer(buildings_layer_obj)
                QgsProject.instance().removeMapLayer(streets_layer_obj)
                self.add_shapefile_to_project(streets_path)
                self.add_shapefile_to_project(buildings_path)
            
            self.dlg.adjust_progressBar.setValue(100) # update progressBar

            self.dlg.adjust_label_feedback.setStyleSheet("color: green")
            self.dlg.adjust_label_feedback.setText('Completed!')
            self.dlg.adjust_label_feedback.repaint()

    def status_analysis(self):
        # update progressBar
        self.dlg.status_progressBar.setValue(0)

        # layer from combo box
        streets_path, streets_layer_name, streets_layer_obj = self.get_layer_path_from_combobox(self.dlg.status_comboBox_streets)
        parcels_path, parcels_layer_name, parcels_layer_obj = self.get_layer_path_from_combobox(self.dlg.status_comboBox_parcels)
        buildings_path, buildings_layer_name, buildings_layer_obj = self.get_layer_path_from_combobox(self.dlg.status_comboBox_buildings)
        
        # attributes from layer
        heat_attribute = self.dlg.status_comboBox_heat.currentText()
        power_attribute = self.dlg.status_comboBox_power.currentText()

        # path from lineEdit
        polygon_path = self.dlg.status_lineEdit_polygons.text()

        self.dlg.status_progressBar.setValue(2) # update progressBar

        # shapes to gdf
        streets = gpd.read_file(streets_path)
        parcels = gpd.read_file(parcels_path)
        buildings = gpd.read_file(buildings_path)

        # HLD/WLD
        wld = WLD(buildings,streets)
        self.dlg.status_progressBar.setValue(5) # update progressBar
        wld.get_centroid()
        self.dlg.status_progressBar.setValue(20) # update progressBar
        wld.closest_street_buildings()
        self.dlg.status_progressBar.setValue(30) # update progressBar
        wld.add_lenght()
        self.dlg.status_progressBar.setValue(40) # update progressBar
        wld.add_heat_att(heat_att=heat_attribute)
        self.dlg.status_progressBar.setValue(50) # update progressBar
        wld.add_WLD(heat_att=heat_attribute)
        self.dlg.status_progressBar.setValue(60) # update progressBar
        wld.streets.to_file(streets_path, crs=self.epsg_code)
        self.add_shapefile_to_project(streets_path, att='hld' )
        

        # polygons
        polygons = Polygons(parcels, wld.streets, buildings)
        polygons.select_parcels_by_building_connection(0.1)
        self.dlg.status_progressBar.setValue(70) # update progressBar
        polygons.buffer_dissolve_and_explode(0.5)
        self.dlg.status_progressBar.setValue(80) # update progressBar
        polygons.add_attributes(heat_attribute, power_attribute)
        self.dlg.status_progressBar.setValue(90) # update progressBar
        polygons.polygons.to_file(polygon_path, crs=self.epsg_code)
        self.add_shapefile_to_project(polygon_path)
        self.dlg.status_progressBar.setValue(100) # update progressBar

    def network_analysis(self):

        # update progressBar
        self.dlg.net_progressBar.setValue(0)

        # pipe info
        excel_file_path = Path(self.plugin_dir) / 'pipe_data.xlsx'
        pipe_info = pd.read_excel(excel_file_path, sheet_name='pipe_data')
        dn_list = pipe_info['DN'].to_list()

        # Load Profiles
        load_profiles = ['EFH', 'MFH', 'GHA', 'GMK', 'GKO']

        # Temperatures from SpinBox
        t_supply = self.dlg.net_doubleSpinBox_supply.value()
        t_return = self.dlg.net_doubleSpinBox_return.value()

        # Layer paths
        source_path, source_layer, source_layer_obj = self.get_layer_path_from_combobox(self.dlg.net_comboBox_source)
        streets_path, streets_layer, streets_layer_obj = self.get_layer_path_from_combobox(self.dlg.net_comboBox_streets)
        buildings_path, buildings_layer, buildings_layer_obj = self.get_layer_path_from_combobox(self.dlg.net_comboBox_buildings)
        polygon_path, polygon_layer, polygon_layer_obj  = self.get_layer_path_from_combobox(self.dlg.net_comboBox_polygon)
        
        heat_attribute = self.dlg.net_comboBox_heat.currentText()
        power_attribute = self.dlg.net_comboBox_power.currentText()

        # path to save net shape file and results
        shape_path = self.dlg.net_lineEdit_net.text()
        result_path = self.dlg.net_lineEdit_result.text()

        # update progressBar
        self.dlg.net_progressBar.setValue(2)

        # Instantiate classes
        buildings = Buildings(buildings_path, heat_attribute, buildings_layer)
        source = Source(source_path, source_layer)
        streets = Streets(streets_path, streets_layer)
        result = Result(result_path)
        
        # check if polygon checkbox is checked
        if self.dlg.net_checkBox_polygon.isChecked():
            # load polygon as gdf
            if polygon_layer == None:
                polygon = gpd.read_file(polygon_path)
            else: 
                polygon = gpd.read_file(polygon_path, layer=polygon_layer)

            # only buildings within polygon
            buildings.gdf = gpd.sjoin(buildings.gdf, polygon, how="inner", predicate="within")

        # Drop unwanted routes if existing
        try:
            streets.gdf = streets.gdf[streets.gdf['possible_route']==1]
        except:
            pass

        # update progressBar
        self.dlg.net_progressBar.setValue(5)

        # create connection points
        buildings.add_centroid()
        buildings.closest_points_buildings(streets.gdf)
        source.closest_points_sources(streets.gdf)
        streets.add_connection_to_streets(buildings.gdf, source.gdf)

        # update progressBar
        self.dlg.net_progressBar.setValue(15)

        # Graph erstellen
        graph = Graph()
        graph.create_street_network(streets.gdf)
        graph.connect_centroids(buildings.gdf)
        graph.connect_source(source.gdf)
        graph.add_attribute_length()
        #graph.test_connection(source.gdf)

        # update progressBar
        self.dlg.net_progressBar.setValue(25)

        net = Net(t_supply,t_return)
        net.network_analysis(graph.graph, buildings.gdf, source.gdf, pipe_info, power_att=power_attribute, progressBar=self.dlg.net_progressBar)
        #net.plot_network(streets.gdf,buildings.gdf,source.gdf,filename='../Netz.png')

        # update progressBar
        self.dlg.net_progressBar.setValue(90)

        # GeoDataFrame aus Netz erstellen
        net.ensure_power_attribute()
        net.graph_to_gdf(crs = self.epsg_code)

        # result
        result.create_data_dict(buildings.gdf, net.gdf, load_profiles, dn_list, heat_attribute, t_supply, t_return)
        result.create_df_from_dataDict(net_name = os.path.splitext(os.path.basename(shape_path))[0])
        
        # save result
        filename, file_extension = os.path.splitext(result_path)
        if file_extension == '.xlsx':
            result.gdf.to_excel(result_path, index=False)
        else: 
            result.gdf.to_csv(result_path, sep=';', index=False)

        # save net shape
        net.gdf.to_file(shape_path)

        # load net as layer
        self.add_shapefile_to_project(shape_path)
        
        # update progressBar
        self.dlg.net_progressBar.setValue(100)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = HeatNetToolDialog()

            # install python packages

            package_list = ['openpyxl','networkx','geopandas','fiona']
            self.dlg.intro_pushButton_load_packages.clicked.connect(lambda: self.install_package(package_list))
            
            # Project path
            project_file_path = QgsProject.instance().fileName()
            self.project_dir = os.path.dirname(project_file_path)

            # Project CRS
            project_crs = QgsProject.instance().crs()
            self.epsg_code = project_crs.authid()

            ### Load ###
            # download options
            self.dlg.load_pushButton_options.clicked.connect(self.load_download_options)
            
            # shape paths
            self.dlg.load_pushButton_buildings.clicked.connect(
                lambda: self.select_output_file(self.project_dir, self.dlg.load_lineEdit_buildings,'*.gpkg;;*.shp'))
            self.dlg.load_pushButton_parcels.clicked.connect(
                lambda: self.select_output_file(self.project_dir, self.dlg.load_lineEdit_parcels,'*.gpkg;;*.shp'))
            self.dlg.load_pushButton_streets.clicked.connect(
                lambda: self.select_output_file(self.project_dir, self.dlg.load_lineEdit_streets,'*.gpkg;;*.shp'))
            
            # Start Download Files 
            self.dlg.load_pushButton_start.clicked.connect(self.download_files)

            ### Adjust ###

            # shape paths
            self.dlg.adjust_pushButton_buildings.clicked.connect(
                lambda: self.select_output_file(self.project_dir, self.dlg.adjust_lineEdit_buildings,'*.gpkg;;*.shp'))
            self.dlg.adjust_pushButton_streets.clicked.connect(
                lambda: self.select_output_file(self.project_dir, self.dlg.adjust_lineEdit_streets,'*.gpkg;;*.shp'))
            
            # Start Adjust Files 
            self.dlg.adjust_pushButton_start.clicked.connect(self.adjust_files)

            ### status ###

            # shape paths
            self.dlg.status_pushButton_polygons.clicked.connect(
                lambda: self.select_output_file(self.project_dir, self.dlg.status_lineEdit_polygons,'*.gpkg;;*.shp'))
            
            # start status analysis
            self.dlg.status_pushButton_start.clicked.connect(self.status_analysis)

            ### Net ###

            # select output file
            self.dlg.net_pushButton_net_output.clicked.connect(
                lambda: self.select_output_file(self.project_dir, self.dlg.net_lineEdit_net,'*.gpkg;;*.shp'))
            self.dlg.net_pushButton_result.clicked.connect(
                lambda: self.select_output_file(self.project_dir, self.dlg.net_lineEdit_result,'*.xlsx;;*.csv'))

            # start network analysis
            self.dlg.net_pushButton_start.clicked.connect(self.network_analysis)

        # updates when tab is changed
        self.dlg.tabWidget.currentChanged.connect(self.tab_change)

        # Connect signal for status_comboBox_buildings to load attributes on change
        self.dlg.status_comboBox_buildings.currentIndexChanged.connect(
            lambda: self.load_attributes('status_comboBox_buildings', 'status_comboBox_heat'))
        self.dlg.status_comboBox_buildings.currentIndexChanged.connect(
            lambda: self.load_attributes('status_comboBox_buildings', 'status_comboBox_power'))
        
        # Connect signal for net_comboBox_buildings to load attributes on change
        self.dlg.net_comboBox_buildings.currentIndexChanged.connect(
            lambda: self.load_attributes('net_comboBox_buildings', 'net_comboBox_heat'))
        self.dlg.net_comboBox_buildings.currentIndexChanged.connect(
            lambda: self.load_attributes('net_comboBox_buildings', 'net_comboBox_power'))

        
        # show the dialog
        self.dlg.show()